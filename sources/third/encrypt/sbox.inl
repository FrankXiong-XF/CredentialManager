namespace xf::encrypt
{
	const unsigned char _sbox[] = {
		0xac, 0xdc, 0x80, 0x7c, 0x8a, 0x10, 0x50, 0x12, 0x81, 0xa1, 0xfa, 0x6a, 0x56, 0xf7, 0x48, 0x6f,
		0xe5, 0xc5, 0x78, 0xc0, 0x8b, 0x38, 0xdf, 0xad, 0x21, 0x8d, 0x8c, 0x61, 0x2c, 0xd7, 0x5e, 0xee,
		0xe2, 0x5b, 0x08, 0x45, 0xcb, 0xe8, 0xc7, 0x0b, 0xa4, 0x65, 0x46, 0xd8, 0x5f, 0x52, 0x0c, 0xcd,
		0xeb, 0xea, 0xb3, 0xa8, 0xe1, 0x1f, 0x44, 0x92, 0x4e, 0xb2, 0x73, 0x47, 0xaf, 0xed, 0xda, 0x69,
		0xbc, 0xc3, 0x57, 0x98, 0x9c, 0x6c, 0x86, 0x74, 0xd3, 0xb0, 0xf0, 0x5d, 0x91, 0x9e, 0x15, 0x66,
		0x9f, 0xaa, 0xef, 0xc9, 0x51, 0xbd, 0x39, 0x8e, 0x62, 0xbe, 0x4d, 0x06, 0x16, 0x00, 0x22, 0x55,
		0x54, 0xff, 0x77, 0x42, 0x3a, 0x27, 0x19, 0x53, 0x97, 0x79, 0xb5, 0x4f, 0x31, 0x83, 0x89, 0xb1,
		0xfc, 0x68, 0x9a, 0x88, 0xe3, 0x0d, 0xbb, 0x23, 0x01, 0xc8, 0xf8, 0xbf, 0x58, 0x5a, 0x34, 0xe7,
		0x18, 0x25, 0x3e, 0x95, 0x02, 0x6b, 0x7d, 0x11, 0x67, 0x84, 0x28, 0xb8, 0xab, 0x7a, 0xcf, 0xdd,
		0xe0, 0xfe, 0x4b, 0xd9, 0x26, 0x1c, 0x7f, 0x7e, 0x1a, 0x96, 0xc4, 0xce, 0xba, 0x75, 0xa9, 0x6e,
		0x4c, 0xd1, 0x36, 0xa6, 0x59, 0xd0, 0x3c, 0xdb, 0xca, 0xc2, 0x64, 0x9d, 0x94, 0x5c, 0x99, 0xec,
		0x87, 0x85, 0x1d, 0xb6, 0xf5, 0x49, 0x20, 0xa0, 0xe6, 0x3d, 0x0f, 0x2a, 0x3b, 0xf4, 0x03, 0x40,
		0xf1, 0x24, 0x14, 0x3f, 0x35, 0x29, 0x2e, 0xde, 0x90, 0xae, 0x93, 0xb4, 0x60, 0x2d, 0xb9, 0xb7,
		0xd4, 0xd2, 0x70, 0x33, 0x2f, 0x0a, 0xf2, 0xc6, 0xa2, 0x13, 0xd5, 0x30, 0xfd, 0xa7, 0x1b, 0x72,
		0xcc, 0x09, 0x04, 0xa5, 0x82, 0xc1, 0xf9, 0x37, 0x1e, 0x32, 0x71, 0x2b, 0x41, 0xe9, 0x07, 0x9b,
		0xfb, 0x05, 0x8f, 0xd6, 0x17, 0x7b, 0x0e, 0xa3, 0x63, 0xf6, 0x76, 0x4a, 0xf3, 0x6d, 0x43, 0xe4
	};

	inline void _swap(unsigned char& a, unsigned char& b)
	{
		if (a != b)
			a ^= b ^= a ^= b;
	}

	template<unsigned int Size>
	inline void _mix_box(unsigned char (&sbox)[Size], const void* key, unsigned int n)
	{
		if (key && 0 < n)
		{
			const unsigned char* _key = (const unsigned char*)key;
			for (unsigned int i = 0, k = 0; i < Size; ++i)
			{
				k = ((k + _sbox[i] + _key[i % n]) & 0xff);
				_swap(sbox[i], sbox[k]);
			}
		}
	}

	inline void _memory_xor(unsigned char* out, const unsigned char* in, unsigned int n)
	{
		for (unsigned int i = 0; i < n; ++i) out[i] ^= in[i];
	}

	inline void _memory_copy(unsigned char* out, const unsigned char* in, unsigned int n)
	{
		for (unsigned int i = 0; i < n; ++i) out[i] = in[i];
	}

}
